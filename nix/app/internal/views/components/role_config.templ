package components

import (
	"treacherest/internal/config"
	"treacherest/internal/game"
	"fmt"
)

type SortedRole struct {
	Name       string
	Definition config.RoleDefinition
}

templ RoleConfiguration(room *game.Room, cfg *config.ServerConfig, sortedRoles []SortedRole) {
	<div id="role-config" class="role-configuration">
		<h3>Game Configuration</h3>
		
		// Player count settings
		<div class="player-count-config">
			<label>Player Count:</label>
			<div class="player-range">
				if room.RoleConfig.MinPlayers == room.RoleConfig.MaxPlayers {
					<span>{ fmt.Sprintf("%d players", room.RoleConfig.MinPlayers) }</span>
				} else {
					<span>{ fmt.Sprintf("%d - %d players", room.RoleConfig.MinPlayers, room.RoleConfig.MaxPlayers) }</span>
				}
			</div>
		</div>

		// Preset selector
		<div class="preset-selector">
			<form id="preset-form" data-on-change={ "@post('/room/" + room.Code + "/config/preset', {contentType: 'form'})" }>
				<label for="role-preset">Role Preset:</label>
				<select 
					id="role-preset" 
					name="preset"
				>
					<option value="custom" selected?={ room.RoleConfig.PresetName == "custom" }>Custom</option>
					for presetName := range cfg.Roles.Presets {
						<option value={ presetName } selected?={ room.RoleConfig.PresetName == presetName }>
							{ presetName }
						</option>
					}
				</select>
			</form>
		</div>

		// Advanced options
		<div class="advanced-options">
			<h4>Advanced Options</h4>
			<div class="option-item">
				<input 
					type="checkbox" 
					id="allow-leaderless"
					checked?={ room.RoleConfig.AllowLeaderlessGame }
					data-on-change={ fmt.Sprintf(`(!evt.target.checked || confirm('Enable leaderless games? This will allow games where all roles are hidden.')) && @post('/room/%s/config/leaderless', {body: JSON.stringify({allowed: evt.target.checked})})`, room.Code) }
				/>
				<label for="allow-leaderless">
					Allow Leaderless Games
					<span class="option-description">(Enables games without a Leader role)</span>
				</label>
			</div>
		</div>

		// Role toggles and counts
		<div class="role-settings">
			<h4>Roles</h4>
			for _, role := range sortedRoles {
				<div class="role-item" 
				     data-role={ role.Name }
				     data-signals={ fmt.Sprintf(`{%s_enabled: %t, roleName: '%s', enabled: %t}`, role.Name, room.RoleConfig.EnabledRoles[role.Name], role.Name, room.RoleConfig.EnabledRoles[role.Name]) }>
					<div class="role-header">
						<input 
							type="checkbox" 
							id={ "role-" + role.Name }
							data-bind={ role.Name + "_enabled" }
							if role.Name == "leader" && room.RoleConfig.AllowLeaderlessGame {
								data-on-change={ fmt.Sprintf(`$roleName = '%s'; $enabled = $%s_enabled; ($enabled || confirm('Are you sure you want to disable the Leader role? This will create a leaderless game where all roles are hidden.')) ? @post('/room/%s/config/toggle') : ($%s_enabled = true)`, role.Name, role.Name, room.Code, role.Name) }
							} else {
								data-on-change={ fmt.Sprintf(`$roleName = '%s'; $enabled = $%s_enabled; @post('/room/%s/config/toggle')`, role.Name, role.Name, room.Code) }
							}
						/>
						<label for={ "role-" + role.Name }>
							{ role.Definition.DisplayName }
							<span class="role-category">({ role.Definition.Category })</span>
						</label>
					</div>
					if room.RoleConfig.EnabledRoles[role.Name] {
						<form id={ "count-form-" + role.Name } data-on-change={ "@post('/room/" + room.Code + "/config/count', {contentType: 'form'})" }>
							<div class="role-count">
								<label>Count:</label>
								<input 
									type="number" 
									name={ "count-" + role.Name }
									value={ fmt.Sprintf("%d", room.RoleConfig.RoleCounts[role.Name]) }
									min={ fmt.Sprintf("%d", role.Definition.MinCount) }
									max={ fmt.Sprintf("%d", role.Definition.MaxCount) }
								/>
								if role.Definition.MinCount > 0 {
									<span class="role-constraint">Required</span>
								}
							</div>
						</form>
					}
				</div>
			}
		</div>

		// Validation messages
		<div id="role-validation" class="validation-messages">
			// Validation messages will be inserted here via SSE
		</div>
	</div>
}

templ RoleValidation(errors []string, warnings []string) {
	if len(errors) > 0 {
		<div class="validation-errors">
			for _, err := range errors {
				<div class="error">❌ { err }</div>
			}
		</div>
	}
	if len(warnings) > 0 {
		<div class="validation-warnings">
			for _, warn := range warnings {
				<div class="warning">⚠️ { warn }</div>
			}
		</div>
	}
	if len(errors) == 0 && len(warnings) == 0 {
		<div class="validation-success">
			✅ Configuration is valid
		</div>
	}
}