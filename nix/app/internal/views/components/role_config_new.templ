package components

import (
	"fmt"
	"treacherest/internal/config"
	"treacherest/internal/game"
)

type RoleTypeDisplay struct {
	TypeName string
	Config   *game.RoleTypeConfig
	Cards    []CardDisplay
}

type CardDisplay struct {
	Name    string
	Enabled bool
}

type PlayerCountDisplay struct {
	IncrementTooltip string
	DecrementTooltip string
	CanIncrement     bool
	CanDecrement     bool
}

templ RoleConfigurationNew(room *game.Room, cfg *config.ServerConfig, cardService *game.CardService, playerCountDisplay PlayerCountDisplay) {
	<div
		id="role-config"
		class="role-configuration"
		data-signals="{cardId: '', cardChecked: false, roleType: '', roleCount: 0, action: ''}"
		data-signals__ifmissing={ fmt.Sprintf(`{accordionLeader: false, accordionGuardian: false, accordionAssassin: false, accordionTraitor: false, allowLeaderless: %t, hideRoleDistribution: %t, fullyRandomRoles: %t, updatingLeaderless: false, updatingHideDistribution: false, updatingFullyRandom: false}`, room.RoleConfig.AllowLeaderlessGame, room.RoleConfig.HideRoleDistribution, room.RoleConfig.FullyRandomRoles) }
	>
		<h3>Game Configuration</h3>
		// Player count settings
		<div class="player-count-config">
			<label>Player Count:</label>
			<div class="player-range flex items-center gap-2">
				<button
					class="btn btn-primary btn-sm"
					data-on-click={ fmt.Sprintf(`@post('/room/%s/config/player-count/decrement')`, room.Code) }
					disabled?={ shouldDisableDecrement(playerCountDisplay, room, cfg) }
					title={ getDecrementTitle(playerCountDisplay) }
				>
					-
				</button>
				<span class="px-2 font-semibold">{ fmt.Sprintf("%d players", room.RoleConfig.MaxPlayers) }</span>
				<button
					class="btn btn-primary btn-sm"
					data-on-click={ fmt.Sprintf(`@post('/room/%s/config/player-count/increment')`, room.Code) }
					disabled?={ shouldDisableIncrement(playerCountDisplay, room, cfg) }
					title={ getIncrementTitle(playerCountDisplay) }
				>
					+
				</button>
			</div>
			if room.RoleConfig.PresetName == "custom" {
				<div class="text-xs text-gray-500 mt-1">
					Custom mode: Roles will be rebalanced automatically
				</div>
			}
		</div>
		// Preset selector
		<div class="preset-selector" data-show="!$hideRoleDistribution && !$fullyRandomRoles">
			<form id="preset-form" data-on-change={ "@post('/room/" + room.Code + "/config/preset', {contentType: 'form'})" }>
				<label for="role-preset">Role Preset:</label>
				<select
					id="role-preset"
					name="preset"
				>
					<option value="custom" selected?={ room.RoleConfig.PresetName == "custom" }>Custom</option>
					for presetName := range cfg.Roles.Presets {
						<option value={ presetName } selected?={ room.RoleConfig.PresetName == presetName }>
							{ presetName }
						</option>
					}
				</select>
			</form>
			// Show auto-scale info for preset configurations
			if room.RoleConfig.PresetName != "custom" {
				<div class="text-xs text-gray-500 mt-1">
					Preset auto-scales roles based on player count
				</div>
			}
		</div>
		// Advanced options
		<div class="advanced-options">
			<h4>Advanced Options</h4>
			<div class="option-item">
				<input
					type="checkbox"
					id="allow-leaderless"
					checked?={ room.RoleConfig.AllowLeaderlessGame }
					data-bind="allowLeaderless"
					data-attr-disabled="$updatingLeaderless"
					data-on-change={ fmt.Sprintf(`$updatingLeaderless = true; @post('/room/%s/config/leaderless', {body: JSON.stringify({allowed: evt.target.checked})})`, room.Code) }
				/>
				<label for="allow-leaderless">
					Allow Leaderless Games
					<span class="option-description">(Enables games without a Leader role)</span>
					<span data-show="$updatingLeaderless" class="loading loading-spinner loading-xs ml-2"></span>
				</label>
			</div>
			<div class="option-item">
				<input
					type="checkbox"
					id="hide-role-distribution"
					checked?={ room.RoleConfig.HideRoleDistribution }
					data-bind="hideRoleDistribution"
					data-attr-disabled="$updatingHideDistribution || $fullyRandomRoles"
					data-on-change={ fmt.Sprintf(`$updatingHideDistribution = true; @post('/room/%s/config/hide-distribution', {body: JSON.stringify({hide: evt.target.checked})})`, room.Code) }
				/>
				<label for="hide-role-distribution">
					Hide Role Distribution
					<span class="option-description">(Hide role counts and randomly select preset)</span>
					<span data-show="$updatingHideDistribution" class="loading loading-spinner loading-xs ml-2"></span>
				</label>
			</div>
			<div class="option-item">
				<input
					type="checkbox"
					id="fully-random-roles"
					checked?={ room.RoleConfig.FullyRandomRoles }
					data-bind="fullyRandomRoles"
					data-attr-disabled="$updatingFullyRandom || $hideRoleDistribution"
					data-on-change={ fmt.Sprintf(`$updatingFullyRandom = true; @post('/room/%s/config/fully-random', {body: JSON.stringify({random: evt.target.checked})})`, room.Code) }
				/>
				<label for="fully-random-roles">
					Fully Random Roles
					<span class="option-description">(Completely randomize role distribution)</span>
					<span data-show="$updatingFullyRandom" class="loading loading-spinner loading-xs ml-2"></span>
				</label>
			</div>
		</div>
		// Role types with collapsible sections
		<div class="role-settings">
			<h4>Roles</h4>
			<div class="join join-vertical w-full" data-show="!$hideRoleDistribution && !$fullyRandomRoles">
				@RoleTypeSection(room, "Leader", room.RoleConfig.RoleTypes["Leader"], cardService.Leaders)
				@RoleTypeSection(room, "Guardian", room.RoleConfig.RoleTypes["Guardian"], cardService.Guardians)
				@RoleTypeSection(room, "Assassin", room.RoleConfig.RoleTypes["Assassin"], cardService.Assassins)
				@RoleTypeSection(room, "Traitor", room.RoleConfig.RoleTypes["Traitor"], cardService.Traitors)
			</div>
			<div class="alert alert-info" data-show="$hideRoleDistribution || $fullyRandomRoles">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
				<span data-show="$hideRoleDistribution">Role distribution is hidden. A preset will be randomly selected when the game starts.</span>
				<span data-show="$fullyRandomRoles">Roles will be completely randomized when the game starts.</span>
			</div>
		</div>
		// Validation messages
		<div id="role-validation" class="validation-messages">
			// Validation messages will be inserted here via SSE
		</div>
	</div>
}

templ RoleTypeSection(room *game.Room, typeName string, typeConfig *game.RoleTypeConfig, cards []*game.Card) {
	if typeConfig == nil {
		<div class="flex items-start gap-4 join-item border border-base-300 p-2">
			<div class="w-20"></div> <!-- Adjusted spacer for wider buttons -->
			<div class="py-3">
				<span class="font-bold">{ typeName }s</span>
				<span class="text-warning ml-2">Not configured</span>
			</div>
		</div>
	} else {
		<div class="join-item border border-base-300">
			<!-- Accordion with integrated controls -->
			<div class="collapse collapse-arrow duration-100">
				<input
					type="checkbox"
					name={ fmt.Sprintf("accordion-%s", typeName) }
					id={ fmt.Sprintf("role-accordion-%s", typeName) }
					data-bind={ fmt.Sprintf("accordion%s", typeName) }
				/>
				<div class="collapse-title font-bold flex items-center gap-4">
					<!-- Controls on the left side of the title -->
					<div class="flex flex-col items-center gap-1 relative z-10">
						<button
							class="btn btn-primary relative z-20"
							data-on-click={ fmt.Sprintf(`@post('/room/%s/config/role-type/%s/increment')`, room.Code, typeName) }
							onclick="event.stopPropagation()"
						>+</button>
						<span class="text-lg font-bold">{ fmt.Sprintf("%d", typeConfig.Count) }</span>
						<button
							class="btn btn-primary relative z-20"
							data-on-click={ fmt.Sprintf(`@post('/room/%s/config/role-type/%s/decrement')`, room.Code, typeName) }
							disabled?={ typeConfig.Count == 0 }
							onclick="event.stopPropagation()"
						>-</button>
					</div>
					<!-- Role name and status -->
					<span>{ typeName }s</span>
					if typeConfig.Count > countEnabledCards(typeConfig) {
						<span class="text-warning ml-2 text-sm">⚠️ { fmt.Sprintf("%d of %d cards enabled", countEnabledCards(typeConfig), typeConfig.Count) }</span>
					} else if typeConfig.Count > 0 {
						<span class="text-success ml-2">✓</span>
					}
				</div>
				<div class="collapse-content">
					<div class="space-y-2">
						for _, card := range cards {
							<div class="form-control">
								<label class="label cursor-pointer justify-start gap-2">
									<input
										type="checkbox"
										class="toggle"
										id={ fmt.Sprintf("card-%s-%s", typeName, card.NameAnchor) }
										checked?={ typeConfig.EnabledCards[card.Name] }
										data-on-click={ fmt.Sprintf(`$cardId = evt.target.id; $cardChecked = evt.target.checked; @post('/room/%s/config/card-toggle')`, room.Code) }
									/>
									<span class="label-text">
										@CardWithModal(card, "")
									</span>
								</label>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

func countEnabledCards(typeConfig *game.RoleTypeConfig) int {
	count := 0
	for _, enabled := range typeConfig.EnabledCards {
		if enabled {
			count++
		}
	}
	return count
}

func shouldDisableDecrement(display PlayerCountDisplay, room *game.Room, cfg *config.ServerConfig) bool {
	if display.DecrementTooltip != "" {
		return !display.CanDecrement
	}
	return room.RoleConfig.MaxPlayers <= cfg.Server.MinPlayersPerRoom || room.RoleConfig.MaxPlayers <= len(room.Players)
}

func shouldDisableIncrement(display PlayerCountDisplay, room *game.Room, cfg *config.ServerConfig) bool {
	if display.IncrementTooltip != "" {
		return !display.CanIncrement
	}
	return room.RoleConfig.MaxPlayers >= cfg.Server.MaxPlayersPerRoom
}

func getDecrementTitle(display PlayerCountDisplay) string {
	if display.DecrementTooltip != "" {
		return display.DecrementTooltip
	}
	return "Decrease player count"
}

func getIncrementTitle(display PlayerCountDisplay) string {
	if display.IncrementTooltip != "" {
		return display.IncrementTooltip
	}
	return "Increase player count"
}
