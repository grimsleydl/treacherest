package pages

import (
	"treacherest/internal/config"
	"treacherest/internal/game"
	"treacherest/internal/views/components"
	"treacherest/internal/views/layouts"
)

templ HostDashboardLobby(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard") {
		@HostDashboardBody(room, player, cfg, cardService)
	}
}

templ HostDashboardBody(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	// Wrapper div with data-on-load that never gets morphed
	<div
		data-on-load={ "@get('/sse/host/" + room.Code + "')" }
		data-signals="{qrCode: ''}"
		data-signals-can-start-game="true"
		data-signals-validation-message=""
		data-signals-can-auto-scale="false"
		data-signals-auto-scale-details=""
		data-signals-required-roles="0"
		data-signals-configured-roles="0"
	>
		<div id="host-dashboard-container" class="min-h-screen p-4">
			<div id="host-dashboard-content">
				@HostDashboardContent(room, player, cfg, cardService)
			</div>
		</div>
	</div>
}

templ HostDashboardContent(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	// Main grid: 1 column on mobile, 2 on tablets, 3 on desktop (if config is present)
	<div class={ "grid gap-6", templ.KV("grid-cols-1 md:grid-cols-2", room.RoleConfig == nil), templ.KV("grid-cols-1 md:grid-cols-2 lg:grid-cols-3", room.RoleConfig != nil) }>
		// QR Code Section
		<div class="card bg-base-200 shadow-xl flex flex-col items-center justify-center p-8">
			<h1 class="text-3xl font-bold mb-4">Scan to Join</h1>
			<div class="text-5xl font-bold tracking-[0.3em] text-primary mb-4">{ room.Code }</div>
			<div class="bg-white p-4 rounded-lg mb-4" id="qr-code-container">
				<!-- QR code will be generated and inserted here -->
				<img
					id="qr-code-img"
					data-attr-src="$qrCode"
					data-show="$qrCode != ''"
					alt="QR Code"
					class="w-[300px] h-[300px] max-w-full"
				/>
				<div id="qr-placeholder" data-show="$qrCode == ''" class="w-[300px] h-[300px] flex items-center justify-center bg-base-300 text-base-content/60 rounded">
					Generating QR Code...
				</div>
			</div>
			<div class="text-center text-lg text-base-content/60">
				Players can scan this code
				<br/>
				or enter the room code
			</div>
		</div>
		// Players Section
		<div class="card bg-base-200 shadow-xl p-8 flex flex-col">
			<h2 class="text-2xl font-bold text-primary mb-4">Players in Room</h2>
			<div class="text-xl mb-4">{ room.GetActivePlayerCount() } connected</div>
			<div id="player-list" class="space-y-3 flex-1 overflow-y-auto mb-6">
				for i, player := range room.GetActivePlayers() {
					<div class="flex items-center p-4 rounded-lg bg-base-300 text-lg">
						<div class="badge badge-primary badge-lg mr-4">{ i + 1 }</div>
						<span>{ player.Name }</span>
					</div>
				}
			</div>
			<div>
				if room.GetActivePlayerCount() >= 1 {
					<button class="btn btn-primary btn-lg w-full text-xl" data-on-click={ "@post('/room/" + room.Code + "/start')" }>
						Start Game
					</button>
				} else {
					<button class="btn btn-disabled btn-lg w-full text-xl" disabled>
						Waiting for players...
					</button>
				}
			</div>
		</div>
		// Role configuration section - responsive layout
		// Desktop (lg:): 3rd column
		// Tablet (md:): full width below the 2-column grid
		// Mobile: stacked vertically
		if room.RoleConfig != nil {
			<div class="md:col-span-2 lg:col-span-1">
				@components.RoleConfigurationNew(room, cfg, cardService, components.PlayerCountDisplay{})
			</div>
		}
	</div>
}

// Countdown state content for SSE updates
templ HostDashboardCountdown(room *game.Room, player *game.Player) {
	<div class="container" style="padding-top: 4rem;">
		@components.CountdownDisplay(room.CountdownRemaining)
	</div>
}

// Playing state content for SSE updates
templ HostDashboardPlaying(room *game.Room, player *game.Player) {
	<div class="container mx-auto px-4 py-8 max-w-4xl">
		<div class="text-center mb-8">
			<h1 class="text-4xl font-bold text-primary mb-4">Game in Progress</h1>
			<div class="text-5xl font-bold tracking-[0.2em] text-primary">{ room.Code }</div>
		</div>
		<div class="card bg-base-200 shadow-lg p-6">
			<h2 class="text-2xl font-bold mb-4 text-primary">Players</h2>
			<div class="space-y-2">
				for i, p := range room.GetActivePlayers() {
					<div class="flex items-center p-3 rounded-lg bg-base-300 hover:bg-base-100 transition-colors">
						<div class="badge badge-primary badge-lg mr-3">{ i + 1 }</div>
						<span class="text-lg">{ p.Name }</span>
					</div>
				}
			</div>
		</div>
	</div>
}

// Ended state content for SSE updates
templ HostDashboardEnded(room *game.Room, player *game.Player) {
	<div class="container mx-auto px-4 py-8 text-center">
		<h1 class="text-4xl font-bold text-primary mb-4">Game Over</h1>
		<div class="text-5xl font-bold tracking-[0.2em] text-primary mb-8">{ room.Code }</div>
		<button class="btn btn-primary btn-lg" data-on-click="@post('/room/new')">
			Start New Game
		</button>
	</div>
}

// Full page versions for direct navigation (not SSE updates)
templ HostDashboardCountdownPage(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard - Starting") {
		@HostDashboardBody(room, player, cfg, cardService)
	}
}

templ HostDashboardPlayingPage(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard - Game") {
		@HostDashboardBody(room, player, cfg, cardService)
	}
}

templ HostDashboardEndedPage(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard - Game Over") {
		@HostDashboardBody(room, player, cfg, cardService)
	}
}
