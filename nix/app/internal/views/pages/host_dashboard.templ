package pages

import (
	"treacherest/internal/config"
	"treacherest/internal/game"
	"treacherest/internal/views/components"
	"treacherest/internal/views/layouts"
)

templ HostDashboardLobby(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard") {
		<style>
			/* Tablet-optimized responsive styles */
			.host-dashboard {
				display: grid;
				grid-template-columns: 1fr 1fr 1fr;
				gap: 2rem;
				height: calc(100vh - 2rem);
				padding: 1rem;
			}
			
			@media (max-width: 768px) {
				.host-dashboard {
					grid-template-columns: 1fr;
					height: auto;
				}
			}
			
			.qr-section {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				border-radius: 12px;
				padding: 2rem;
			}
			
			.qr-code-container {
				background: white;
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 1rem;
			}
			
			.qr-code-container img {
				display: block;
				width: 300px;
				height: 300px;
				max-width: 100%;
				height: auto;
			}
			
			.players-section {
				border-radius: 12px;
				padding: 2rem;
				overflow-y: auto;
			}
			
			.room-code-large {
				font-size: 3rem;
				font-weight: bold;
				letter-spacing: 0.3em;
				/* Use DaisyUI primary color */
				margin-bottom: 1rem;
			}
			
			.join-instruction {
				font-size: 1.2rem;
				/* Use DaisyUI base-content with opacity */
				text-align: center;
				margin-bottom: 2rem;
			}
			
			.player-count {
				font-size: 1.5rem;
				margin-bottom: 1rem;
				/* Use DaisyUI primary color */
			}
			
			.host-player-list {
				display: flex;
				flex-direction: column;
				gap: 1rem;
			}
			
			.host-player-item {
				/* Use DaisyUI base-300 */
				padding: 1.5rem;
				border-radius: 8px;
				font-size: 1.3rem;
				display: flex;
				align-items: center;
				justify-content: space-between;
			}
			
			.player-number {
				/* Use DaisyUI primary bg and content */
				width: 40px;
				height: 40px;
				border-radius: 50%;
				display: flex;
				align-items: center;
				justify-content: center;
				font-weight: bold;
				margin-right: 1rem;
			}
			
			.start-button-container {
				margin-top: 2rem;
				text-align: center;
			}
			
			.start-button-container button {
				width: 100%;
				font-size: 1.5rem;
				padding: 1.2rem;
			}
		</style>
		@HostDashboardBody(room, player, cfg, cardService)
	}
}

templ HostDashboardBody(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	// Wrapper div with data-on-load that never gets morphed
	<div data-on-load={ "@get('/sse/host/" + room.Code + "')" } 
	     data-signals="{qrCode: ''}"
	     data-signals-can-start-game="true"
	     data-signals-validation-message=""
	     data-signals-can-auto-scale="false"
	     data-signals-auto-scale-details=""
	     data-signals-required-roles="0"
	     data-signals-configured-roles="0">
		<div id="host-dashboard-container" class="host-dashboard">
			<div id="host-dashboard-content">
				@HostDashboardContent(room, player, cfg, cardService)
			</div>
		</div>
	</div>
}

templ HostDashboardContent(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	<div class="qr-section bg-base-200">
		<h1>Scan to Join</h1>
		<div class="room-code-large text-primary">{ room.Code }</div>
		<div class="qr-code-container" id="qr-code-container">
			<!-- QR code will be generated and inserted here -->
			<img
				id="qr-code-img"
				data-attr-src="$qrCode"
				data-show="$qrCode != ''"
				alt="QR Code"
				style="width: 300px; height: 300px;"
			/>
			<div id="qr-placeholder" data-show="$qrCode == ''" style="width: 300px; height: 300px; display: flex; align-items: center; justify-content: center;" class="bg-base-300 text-base-content text-opacity-60">
				Generating QR Code...
			</div>
		</div>
		<div class="join-instruction text-base-content text-opacity-60">
			Players can scan this code
			<br/>
			or enter the room code
		</div>
	</div>
	<div class="players-section bg-base-200">
		<h2 class="text-primary">Players in Room</h2>
		<div class="player-count">{ room.GetActivePlayerCount() } connected</div>
		<div id="player-list" class="host-player-list">
			for i, player := range room.GetActivePlayers() {
				<div class="host-player-item bg-base-300">
					<div style="display: flex; align-items: center;">
						<div class="player-number bg-primary text-primary-content">{ i + 1 }</div>
						<span>{ player.Name }</span>
					</div>
				</div>
			}
		</div>
		<div class="start-button-container">
			if room.GetActivePlayerCount() >= 1 {
				<button data-on-click={ "@post('/room/" + room.Code + "/start')" }>
					Start Game
				</button>
			} else {
				<button disabled>
					Waiting for players...
				</button>
			}
		</div>
	</div>
	// Role configuration section - only for host
	if room.RoleConfig != nil {
		@components.RoleConfigurationNew(room, cfg, cardService)
	}
}

// Countdown state content for SSE updates
templ HostDashboardCountdown(room *game.Room, player *game.Player) {
	<div class="container" style="padding-top: 4rem;">
		@components.CountdownDisplay(room.CountdownRemaining)
	</div>
}

// Playing state content for SSE updates
templ HostDashboardPlaying(room *game.Room, player *game.Player) {
	<div class="container">
		<h1>Game in Progress</h1>
		<div class="room-code">{ room.Code }</div>
		<div class="player-list">
			<h2>Players</h2>
			for _, p := range room.GetActivePlayers() {
				<div class="player">
					{ p.Name }
				</div>
			}
		</div>
	</div>
}

// Ended state content for SSE updates
templ HostDashboardEnded(room *game.Room, player *game.Player) {
	<div class="container" style="text-align: center;">
		<h1>Game Over</h1>
		<div class="room-code">{ room.Code }</div>
		<button data-on-click="@post('/room/new')" style="margin-top: 2rem;">
			Start New Game
		</button>
	</div>
}

// Full page versions for direct navigation (not SSE updates)
templ HostDashboardCountdownPage(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard - Starting") {
		@HostDashboardBody(room, player, cfg, cardService)
	}
}

templ HostDashboardPlayingPage(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard - Game") {
		@HostDashboardBody(room, player, cfg, cardService)
	}
}

templ HostDashboardEndedPage(room *game.Room, player *game.Player, cfg *config.ServerConfig, cardService *game.CardService) {
	@layouts.Base("Host Dashboard - Game Over") {
		@HostDashboardBody(room, player, cfg, cardService)
	}
}
