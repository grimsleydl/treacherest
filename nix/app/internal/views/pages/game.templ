package pages

import (
	"fmt"
	"treacherest/internal/game"
	"treacherest/internal/views/layouts"
)

templ GamePage(room *game.Room, currentPlayer *game.Player) {
	@layouts.Base("Game") {
		@GameBody(room, currentPlayer)
	}
}

templ GameBody(room *game.Room, currentPlayer *game.Player) {
	// data-on-load is on wrapper div that never gets morphed to prevent re-triggering
	<div data-on-load={ "@get('/sse/game/" + room.Code + "')" }>
		@GameContent(room, currentPlayer)
	</div>
}

templ GameContent(room *game.Room, currentPlayer *game.Player) {
	<div
		id="game-container"
		class="container"
		data-signals={ fmt.Sprintf("{countdown: %d}", room.CountdownRemaining) }
	>
		if room.State == game.StateCountdown {
			<div class="countdown">
				<h1>Revealing roles in { fmt.Sprint(room.CountdownRemaining) }...</h1>
			</div>
		} else {
			<div class="role-view">
				if currentPlayer.Role != nil {
					<div class={ "role-card", getRoleClass(string(currentPlayer.Role.GetRoleType())) }>
						<div class="card-image-container">
							<img 
								src={ currentPlayer.Role.GetImageBase64() }
								alt={ currentPlayer.Role.Name }
								class="card-image"
							/>
						</div>
						<div class="card-details">
							<h2>{ currentPlayer.Role.Name }</h2>
							<div class="card-type">{ currentPlayer.Role.Type }</div>
							<div class="card-rarity">{ currentPlayer.Role.Rarity }</div>
							<div class="card-text">{ currentPlayer.Role.Text }</div>
							<div class="card-meta">
								<p><strong>Win Condition:</strong> { currentPlayer.Role.GetWinCondition() }</p>
								<p class="card-artist"><em>Art by { currentPlayer.Role.Artist }</em></p>
							</div>
						</div>
					</div>
				}
				if leader := room.GetLeader(); leader != nil && currentPlayer.Role != nil && (currentPlayer.Role.GetRoleType() == game.RoleLeader || room.LeaderRevealed) {
					<div class="leader-info">
						<h3>Leader: { leader.Name }</h3>
					</div>
				}
				<div class="player-list">
					<h2>Players</h2>
					for _, player := range room.GetActivePlayers() {
						<div class="player">
							<span>{ player.Name }</span>
							if player.RoleRevealed {
								<span class="role">{ player.Role.Name }</span>
							}
						</div>
					}
				</div>
			</div>
		}
	</div>
}

func getRoleClass(roleType string) string {
	switch roleType {
	case string(game.RoleLeader):
		return "leader"
	case string(game.RoleGuardian):
		return "guardian"
	case string(game.RoleAssassin):
		return "assassin"
	case string(game.RoleTraitor):
		return "traitor"
	default:
		return ""
	}
}
