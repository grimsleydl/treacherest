package pages

import (
	"fmt"
	"strings"
	"treacherest/internal/game"
	"treacherest/internal/views/components"
	"treacherest/internal/views/layouts"
)

templ GamePage(room *game.Room, currentPlayer *game.Player) {
	@layouts.Base("Game") {
		@GameBody(room, currentPlayer)
	}
}

templ GameBody(room *game.Room, currentPlayer *game.Player) {
	// data-on-load is on wrapper div that never gets morphed to prevent re-triggering
	<div data-on-load={ "@get('/sse/game/" + room.Code + "')" }>
		@GameContent(room, currentPlayer)
	</div>
}

templ GameContent(room *game.Room, currentPlayer *game.Player) {
	<div
		id="game-container"
		class="container"
		data-signals={ fmt.Sprintf(`{"countdown": %d}`, room.CountdownRemaining) }
	>
		if room.State == game.StateCountdown {
			@components.CountdownDisplayWithMessage(room.CountdownRemaining, "Revealing roles in...")
		} else {
			<div class="flex flex-col items-center gap-8 p-4">
				if currentPlayer.Role != nil {
					<div
						class={ "card bg-base-200 shadow-xl max-w-md w-full mx-auto", getRoleClass(string(currentPlayer.Role.GetRoleType())) }
					>
						<figure>
							<img
								src={ currentPlayer.Role.GetImageBase64() }
								alt={ currentPlayer.Role.Name }
								class="w-full h-auto"
								onerror="this.style.display='none'"
							/>
						</figure>
						<div class="card-body">
							<div class="flex items-center gap-2 mb-2">
								<h2 class="card-title text-2xl">{ currentPlayer.Role.Name }</h2>
								if currentPlayer.Role.URI != "" {
									<a
										href={ templ.SafeURL(currentPlayer.Role.URI) }
										target="_blank"
										rel="noopener noreferrer"
										class="link link-primary"
										title="View on MTG Treachery Oracle"
									>
										<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
											<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
										</svg>
									</a>
								}
							</div>
							<div class="flex gap-2 mb-4">
								<div class="badge badge-primary">{ currentPlayer.Role.Type }</div>
								<div class="badge badge-secondary">{ currentPlayer.Role.Rarity }</div>
							</div>
							<div class="text-base-content/80 mb-4">
								@FormatCardText(currentPlayer.Role.Text)
							</div>
							<div class="divider"></div>
							<div class="space-y-2">
								<p class="text-sm text-base-content/80"><strong>Win Condition:</strong> { currentPlayer.Role.GetWinCondition() }</p>
								if len(currentPlayer.Role.Rulings) > 0 {
									<div class="divider"></div>
									<div>
										<h3 class="text-xs font-bold mb-2 uppercase tracking-wider text-base-content/80">NOTES AND RULES INFORMATION FOR { strings.ToUpper(currentPlayer.Role.Name) }</h3>
										<div class="text-xs space-y-1 text-base-content/80">
											@FormatRulings(currentPlayer.Role.Rulings)
										</div>
									</div>
								}
								<p class="text-xs text-base-content/60 mt-4"><em>Art by { currentPlayer.Role.Artist }</em></p>
							</div>
						</div>
					</div>
				}
				if leader := room.GetLeader(); leader != nil && currentPlayer.Role != nil && (currentPlayer.Role.GetRoleType() == game.RoleLeader || room.LeaderRevealed) {
					<div class="alert alert-warning max-w-md w-full">
						<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>
						<span class="text-lg font-bold">Leader: { leader.Name }</span>
					</div>
				}
				<div class="card bg-base-200 shadow-lg p-6 max-w-md w-full">
					<h2 class="text-xl font-bold mb-4 text-primary">Players</h2>
					<div class="space-y-2">
						for _, player := range room.GetActivePlayers() {
							<div class="flex justify-between items-center p-2 rounded hover:bg-base-300 transition-colors">
								<span>{ player.Name }</span>
								if player.RoleRevealed {
									<span class="badge badge-sm">{ player.Role.Name }</span>
								}
							</div>
						}
					</div>
				</div>
			</div>
		}
	</div>
}

func getRoleClass(roleType string) string {
	switch roleType {
	case string(game.RoleLeader):
		return "border-4 border-warning shadow-lg"
	case string(game.RoleGuardian):
		return "border-4 border-info shadow-lg"
	case string(game.RoleAssassin):
		return "border-4 border-error shadow-lg"
	case string(game.RoleTraitor):
		return "border-4 border-secondary shadow-lg"
	default:
		return ""
	}
}

// FormatCardText formats card text similar to Scryfall's oracle text:
// - Converts | to line breaks
// - Italicizes text in parentheses (reminder text)
templ FormatCardText(text string) {
	for i, line := range FormatCardTextToLines(text) {
		<div class={ templ.KV("mb-2", i < len(FormatCardTextToLines(text))-1) }>
			for _, part := range line.Parts {
				if part.IsMana {
					<i class={ "ms ms-" + strings.ToLower(part.ManaSymbol), "ms-cost" }></i>
				} else if part.Italic {
					<span class="italic" style="font-style: italic;">
						@templ.Raw(escapeHTMLKeepUnicode(part.Text))
					</span>
				} else {
					<span>
						@templ.Raw(escapeHTMLKeepUnicode(part.Text))
					</span>
				}
			}
		</div>
	}
}

// FormatRulings formats rulings, handling separator lines differently
templ FormatRulings(rulings []string) {
	<div class="space-y-2 max-w-full overflow-hidden">
		for _, ruling := range rulings {
			if strings.HasPrefix(ruling, "----------") && strings.HasSuffix(ruling, "----------") {
				// This is a separator line, render it without bullets
				<div class="my-4 px-2">
					<div class="text-xs font-semibold text-base-content/60 text-center italic">
						{ strings.TrimPrefix(strings.TrimSuffix(ruling, " ----------"), "---------- ") }
					</div>
					<div class="divider my-2"></div>
				</div>
			} else {
				// Regular ruling, render as paragraph with bullet
				<div class="flex gap-2">
					<span class="text-base-content/60 flex-shrink-0">â€¢</span>
					<span class="flex-1 break-words">{ ruling }</span>
				</div>
			}
		}
	</div>
}
